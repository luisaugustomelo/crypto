// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"
	system "klever/grpc/upvote/system"

	mock "github.com/stretchr/testify/mock"
)

// UpVoteServiceServer is an autogenerated mock type for the UpVoteServiceServer type
type UpVoteServiceServer struct {
	mock.Mock
}

// CreateCryptocurrency provides a mock function with given fields: _a0, _a1
func (_m *UpVoteServiceServer) CreateCryptocurrency(_a0 context.Context, _a1 *system.CreateCryptocurrencyRequest) (*system.CreateCryptocurrencyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *system.CreateCryptocurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.CreateCryptocurrencyRequest) *system.CreateCryptocurrencyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.CreateCryptocurrencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.CreateCryptocurrencyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCryptocurrency provides a mock function with given fields: _a0, _a1
func (_m *UpVoteServiceServer) DeleteCryptocurrency(_a0 context.Context, _a1 *system.DeleteCryptocurrencyRequest) (*system.DeleteCryptocurrencyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *system.DeleteCryptocurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.DeleteCryptocurrencyRequest) *system.DeleteCryptocurrencyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.DeleteCryptocurrencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.DeleteCryptocurrencyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownVoteCriptocurrency provides a mock function with given fields: _a0, _a1
func (_m *UpVoteServiceServer) DownVoteCriptocurrency(_a0 context.Context, _a1 *system.DownVoteCryptocurrencyRequest) (*system.DownVoteCryptocurrencyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *system.DownVoteCryptocurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.DownVoteCryptocurrencyRequest) *system.DownVoteCryptocurrencyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.DownVoteCryptocurrencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.DownVoteCryptocurrencyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSumVotes provides a mock function with given fields: _a0, _a1
func (_m *UpVoteServiceServer) GetSumVotes(_a0 context.Context, _a1 *system.GetSumVotesRequest) (*system.GetSumVotesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *system.GetSumVotesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.GetSumVotesRequest) *system.GetSumVotesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.GetSumVotesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.GetSumVotesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSumVotesByStream provides a mock function with given fields: _a0, _a1
func (_m *UpVoteServiceServer) GetSumVotesByStream(_a0 *system.GetSumVotesStreamRequest, _a1 system.UpVoteService_GetSumVotesByStreamServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*system.GetSumVotesStreamRequest, system.UpVoteService_GetSumVotesByStreamServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HealthCheck provides a mock function with given fields: _a0, _a1
func (_m *UpVoteServiceServer) HealthCheck(_a0 context.Context, _a1 *system.Message) (*system.Message, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *system.Message
	if rf, ok := ret.Get(0).(func(context.Context, *system.Message) *system.Message); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.Message) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllCriptocurrencies provides a mock function with given fields: _a0, _a1
func (_m *UpVoteServiceServer) ListAllCriptocurrencies(_a0 *system.ListAllCryptocurrenciesRequest, _a1 system.UpVoteService_ListAllCriptocurrenciesServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*system.ListAllCryptocurrenciesRequest, system.UpVoteService_ListAllCriptocurrenciesServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadCryptocurrencyById provides a mock function with given fields: _a0, _a1
func (_m *UpVoteServiceServer) ReadCryptocurrencyById(_a0 context.Context, _a1 *system.ReadCryptocurrencyRequest) (*system.ReadCryptocurrencyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *system.ReadCryptocurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.ReadCryptocurrencyRequest) *system.ReadCryptocurrencyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.ReadCryptocurrencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.ReadCryptocurrencyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpVoteCriptocurrency provides a mock function with given fields: _a0, _a1
func (_m *UpVoteServiceServer) UpVoteCriptocurrency(_a0 context.Context, _a1 *system.UpVoteCryptocurrencyRequest) (*system.UpVoteCryptocurrencyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *system.UpVoteCryptocurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.UpVoteCryptocurrencyRequest) *system.UpVoteCryptocurrencyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.UpVoteCryptocurrencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.UpVoteCryptocurrencyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCryptocurrency provides a mock function with given fields: _a0, _a1
func (_m *UpVoteServiceServer) UpdateCryptocurrency(_a0 context.Context, _a1 *system.UpdateCryptocurrencyRequest) (*system.UpdateCryptocurrencyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *system.UpdateCryptocurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.UpdateCryptocurrencyRequest) *system.UpdateCryptocurrencyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.UpdateCryptocurrencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.UpdateCryptocurrencyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
