// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	system "klever/grpc/upvote/system"
)

// UpVoteServiceClient is an autogenerated mock type for the UpVoteServiceClient type
type UpVoteServiceClient struct {
	mock.Mock
}

// CreateCryptocurrency provides a mock function with given fields: ctx, in, opts
func (_m *UpVoteServiceClient) CreateCryptocurrency(ctx context.Context, in *system.CreateCryptocurrencyRequest, opts ...grpc.CallOption) (*system.CreateCryptocurrencyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *system.CreateCryptocurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.CreateCryptocurrencyRequest, ...grpc.CallOption) *system.CreateCryptocurrencyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.CreateCryptocurrencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.CreateCryptocurrencyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCryptocurrency provides a mock function with given fields: ctx, in, opts
func (_m *UpVoteServiceClient) DeleteCryptocurrency(ctx context.Context, in *system.DeleteCryptocurrencyRequest, opts ...grpc.CallOption) (*system.DeleteCryptocurrencyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *system.DeleteCryptocurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.DeleteCryptocurrencyRequest, ...grpc.CallOption) *system.DeleteCryptocurrencyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.DeleteCryptocurrencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.DeleteCryptocurrencyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownVoteCriptocurrency provides a mock function with given fields: ctx, in, opts
func (_m *UpVoteServiceClient) DownVoteCriptocurrency(ctx context.Context, in *system.DownVoteCryptocurrencyRequest, opts ...grpc.CallOption) (*system.DownVoteCryptocurrencyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *system.DownVoteCryptocurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.DownVoteCryptocurrencyRequest, ...grpc.CallOption) *system.DownVoteCryptocurrencyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.DownVoteCryptocurrencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.DownVoteCryptocurrencyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSumVotes provides a mock function with given fields: ctx, in, opts
func (_m *UpVoteServiceClient) GetSumVotes(ctx context.Context, in *system.GetSumVotesRequest, opts ...grpc.CallOption) (*system.GetSumVotesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *system.GetSumVotesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.GetSumVotesRequest, ...grpc.CallOption) *system.GetSumVotesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.GetSumVotesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.GetSumVotesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSumVotesByStream provides a mock function with given fields: ctx, in, opts
func (_m *UpVoteServiceClient) GetSumVotesByStream(ctx context.Context, in *system.GetSumVotesStreamRequest, opts ...grpc.CallOption) (system.UpVoteService_GetSumVotesByStreamClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 system.UpVoteService_GetSumVotesByStreamClient
	if rf, ok := ret.Get(0).(func(context.Context, *system.GetSumVotesStreamRequest, ...grpc.CallOption) system.UpVoteService_GetSumVotesByStreamClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(system.UpVoteService_GetSumVotesByStreamClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.GetSumVotesStreamRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheck provides a mock function with given fields: ctx, in, opts
func (_m *UpVoteServiceClient) HealthCheck(ctx context.Context, in *system.Message, opts ...grpc.CallOption) (*system.Message, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *system.Message
	if rf, ok := ret.Get(0).(func(context.Context, *system.Message, ...grpc.CallOption) *system.Message); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.Message, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllCriptocurrencies provides a mock function with given fields: ctx, in, opts
func (_m *UpVoteServiceClient) ListAllCriptocurrencies(ctx context.Context, in *system.ListAllCryptocurrenciesRequest, opts ...grpc.CallOption) (system.UpVoteService_ListAllCriptocurrenciesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 system.UpVoteService_ListAllCriptocurrenciesClient
	if rf, ok := ret.Get(0).(func(context.Context, *system.ListAllCryptocurrenciesRequest, ...grpc.CallOption) system.UpVoteService_ListAllCriptocurrenciesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(system.UpVoteService_ListAllCriptocurrenciesClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.ListAllCryptocurrenciesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadCryptocurrencyById provides a mock function with given fields: ctx, in, opts
func (_m *UpVoteServiceClient) ReadCryptocurrencyById(ctx context.Context, in *system.ReadCryptocurrencyRequest, opts ...grpc.CallOption) (*system.ReadCryptocurrencyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *system.ReadCryptocurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.ReadCryptocurrencyRequest, ...grpc.CallOption) *system.ReadCryptocurrencyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.ReadCryptocurrencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.ReadCryptocurrencyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpVoteCriptocurrency provides a mock function with given fields: ctx, in, opts
func (_m *UpVoteServiceClient) UpVoteCriptocurrency(ctx context.Context, in *system.UpVoteCryptocurrencyRequest, opts ...grpc.CallOption) (*system.UpVoteCryptocurrencyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *system.UpVoteCryptocurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.UpVoteCryptocurrencyRequest, ...grpc.CallOption) *system.UpVoteCryptocurrencyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.UpVoteCryptocurrencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.UpVoteCryptocurrencyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCryptocurrency provides a mock function with given fields: ctx, in, opts
func (_m *UpVoteServiceClient) UpdateCryptocurrency(ctx context.Context, in *system.UpdateCryptocurrencyRequest, opts ...grpc.CallOption) (*system.UpdateCryptocurrencyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *system.UpdateCryptocurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *system.UpdateCryptocurrencyRequest, ...grpc.CallOption) *system.UpdateCryptocurrencyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system.UpdateCryptocurrencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *system.UpdateCryptocurrencyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
