// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: upvote/upvotesystem.proto

package system

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Cryptocurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Initials    string `protobuf:"bytes,3,opt,name=initials,proto3" json:"initials,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Upvote      int32  `protobuf:"varint,5,opt,name=upvote,proto3" json:"upvote,omitempty"`
	Downvote    int32  `protobuf:"varint,6,opt,name=downvote,proto3" json:"downvote,omitempty"`
}

func (x *Cryptocurrency) Reset() {
	*x = Cryptocurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upvote_upvotesystem_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cryptocurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cryptocurrency) ProtoMessage() {}

func (x *Cryptocurrency) ProtoReflect() protoreflect.Message {
	mi := &file_upvote_upvotesystem_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cryptocurrency.ProtoReflect.Descriptor instead.
func (*Cryptocurrency) Descriptor() ([]byte, []int) {
	return file_upvote_upvotesystem_proto_rawDescGZIP(), []int{0}
}

func (x *Cryptocurrency) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cryptocurrency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cryptocurrency) GetInitials() string {
	if x != nil {
		return x.Initials
	}
	return ""
}

func (x *Cryptocurrency) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cryptocurrency) GetUpvote() int32 {
	if x != nil {
		return x.Upvote
	}
	return 0
}

func (x *Cryptocurrency) GetDownvote() int32 {
	if x != nil {
		return x.Downvote
	}
	return 0
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upvote_upvotesystem_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_upvote_upvotesystem_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_upvote_upvotesystem_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type CreateCryptocurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crypto *Cryptocurrency `protobuf:"bytes,1,opt,name=crypto,proto3" json:"crypto,omitempty"`
}

func (x *CreateCryptocurrencyResponse) Reset() {
	*x = CreateCryptocurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upvote_upvotesystem_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCryptocurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCryptocurrencyResponse) ProtoMessage() {}

func (x *CreateCryptocurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_upvote_upvotesystem_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCryptocurrencyResponse.ProtoReflect.Descriptor instead.
func (*CreateCryptocurrencyResponse) Descriptor() ([]byte, []int) {
	return file_upvote_upvotesystem_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCryptocurrencyResponse) GetCrypto() *Cryptocurrency {
	if x != nil {
		return x.Crypto
	}
	return nil
}

type CreateCryptocurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crypto *Cryptocurrency `protobuf:"bytes,1,opt,name=crypto,proto3" json:"crypto,omitempty"`
}

func (x *CreateCryptocurrencyRequest) Reset() {
	*x = CreateCryptocurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upvote_upvotesystem_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCryptocurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCryptocurrencyRequest) ProtoMessage() {}

func (x *CreateCryptocurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_upvote_upvotesystem_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCryptocurrencyRequest.ProtoReflect.Descriptor instead.
func (*CreateCryptocurrencyRequest) Descriptor() ([]byte, []int) {
	return file_upvote_upvotesystem_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCryptocurrencyRequest) GetCrypto() *Cryptocurrency {
	if x != nil {
		return x.Crypto
	}
	return nil
}

var File_upvote_upvotesystem_proto protoreflect.FileDescriptor

var file_upvote_upvotesystem_proto_rawDesc = []byte{
	0x0a, 0x19, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x2f, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x75, 0x70, 0x76,
	0x6f, 0x74, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x76, 0x6f,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x1d, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x4e, 0x0a, 0x1c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x70, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x32, 0x9a, 0x01, 0x0a, 0x0d, 0x55,
	0x70, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x55, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x23, 0x2e, 0x75, 0x70, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_upvote_upvotesystem_proto_rawDescOnce sync.Once
	file_upvote_upvotesystem_proto_rawDescData = file_upvote_upvotesystem_proto_rawDesc
)

func file_upvote_upvotesystem_proto_rawDescGZIP() []byte {
	file_upvote_upvotesystem_proto_rawDescOnce.Do(func() {
		file_upvote_upvotesystem_proto_rawDescData = protoimpl.X.CompressGZIP(file_upvote_upvotesystem_proto_rawDescData)
	})
	return file_upvote_upvotesystem_proto_rawDescData
}

var file_upvote_upvotesystem_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_upvote_upvotesystem_proto_goTypes = []interface{}{
	(*Cryptocurrency)(nil),               // 0: upvote.Cryptocurrency
	(*Message)(nil),                      // 1: upvote.Message
	(*CreateCryptocurrencyResponse)(nil), // 2: upvote.CreateCryptocurrencyResponse
	(*CreateCryptocurrencyRequest)(nil),  // 3: upvote.CreateCryptocurrencyRequest
}
var file_upvote_upvotesystem_proto_depIdxs = []int32{
	0, // 0: upvote.CreateCryptocurrencyResponse.crypto:type_name -> upvote.Cryptocurrency
	0, // 1: upvote.CreateCryptocurrencyRequest.crypto:type_name -> upvote.Cryptocurrency
	1, // 2: upvote.UpVoteService.UpVote:input_type -> upvote.Message
	3, // 3: upvote.UpVoteService.CreateCrypto:input_type -> upvote.CreateCryptocurrencyRequest
	1, // 4: upvote.UpVoteService.UpVote:output_type -> upvote.Message
	2, // 5: upvote.UpVoteService.CreateCrypto:output_type -> upvote.CreateCryptocurrencyResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_upvote_upvotesystem_proto_init() }
func file_upvote_upvotesystem_proto_init() {
	if File_upvote_upvotesystem_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_upvote_upvotesystem_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cryptocurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upvote_upvotesystem_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upvote_upvotesystem_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCryptocurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upvote_upvotesystem_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCryptocurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_upvote_upvotesystem_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_upvote_upvotesystem_proto_goTypes,
		DependencyIndexes: file_upvote_upvotesystem_proto_depIdxs,
		MessageInfos:      file_upvote_upvotesystem_proto_msgTypes,
	}.Build()
	File_upvote_upvotesystem_proto = out.File
	file_upvote_upvotesystem_proto_rawDesc = nil
	file_upvote_upvotesystem_proto_goTypes = nil
	file_upvote_upvotesystem_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UpVoteServiceClient is the client API for UpVoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpVoteServiceClient interface {
	UpVote(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	CreateCrypto(ctx context.Context, in *CreateCryptocurrencyRequest, opts ...grpc.CallOption) (*CreateCryptocurrencyResponse, error)
}

type upVoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpVoteServiceClient(cc grpc.ClientConnInterface) UpVoteServiceClient {
	return &upVoteServiceClient{cc}
}

func (c *upVoteServiceClient) UpVote(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/upvote.UpVoteService/UpVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upVoteServiceClient) CreateCrypto(ctx context.Context, in *CreateCryptocurrencyRequest, opts ...grpc.CallOption) (*CreateCryptocurrencyResponse, error) {
	out := new(CreateCryptocurrencyResponse)
	err := c.cc.Invoke(ctx, "/upvote.UpVoteService/CreateCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpVoteServiceServer is the server API for UpVoteService service.
type UpVoteServiceServer interface {
	UpVote(context.Context, *Message) (*Message, error)
	CreateCrypto(context.Context, *CreateCryptocurrencyRequest) (*CreateCryptocurrencyResponse, error)
}

// UnimplementedUpVoteServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUpVoteServiceServer struct {
}

func (*UnimplementedUpVoteServiceServer) UpVote(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpVote not implemented")
}
func (*UnimplementedUpVoteServiceServer) CreateCrypto(context.Context, *CreateCryptocurrencyRequest) (*CreateCryptocurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrypto not implemented")
}

func RegisterUpVoteServiceServer(s *grpc.Server, srv UpVoteServiceServer) {
	s.RegisterService(&_UpVoteService_serviceDesc, srv)
}

func _UpVoteService_UpVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpVoteServiceServer).UpVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upvote.UpVoteService/UpVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpVoteServiceServer).UpVote(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpVoteService_CreateCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCryptocurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpVoteServiceServer).CreateCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upvote.UpVoteService/CreateCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpVoteServiceServer).CreateCrypto(ctx, req.(*CreateCryptocurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpVoteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "upvote.UpVoteService",
	HandlerType: (*UpVoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpVote",
			Handler:    _UpVoteService_UpVote_Handler,
		},
		{
			MethodName: "CreateCrypto",
			Handler:    _UpVoteService_CreateCrypto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upvote/upvotesystem.proto",
}
